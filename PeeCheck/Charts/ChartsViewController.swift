//
//  ChartsViewController.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 10/06/2018.
//  Copyright (c) 2018 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChartsDisplayLogic: class
{
    func displayChartsView(viewModel: Charts.FetchChartsViews.ViewModel)
}

class ChartsViewController: UITableViewController, ChartsDisplayLogic
{
    var interactor: ChartsBusinessLogic?
    var router: (NSObjectProtocol & ChartsRoutingLogic & ChartsDataPassing)?
    var displayedViewsControllers: [Charts.FetchChartsViews.ViewModel.DisplayedView] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ChartsInteractor()
        let presenter = ChartsPresenter()
        let router = ChartsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setUpUI() {
        self.navigationItem.leftItemsSupplementBackButton = true
        self.navigationItem.leftBarButtonItem = splitViewController?.displayModeButtonItem
        tableView.register(UINib(nibName: "ChartsTableViewCell", bundle: nil), forCellReuseIdentifier: "ChartsTableViewCell")
        
        self.title = "charts_menu_title".localized()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpUI()
        fetchChartsViews()
    }
    
    // MARK: Do something
        
    func fetchChartsViews() {
        let request = Charts.FetchChartsViews.Request()
        interactor?.fetchChartsViews(request: request)
    }
    
    func  displayChartsView(viewModel: Charts.FetchChartsViews.ViewModel) {
        displayedViewsControllers = viewModel.displayedViewControllers
        tableView.reloadData()
        let displayedChartPage = displayedViewsControllers[0]
        splitViewController?.viewControllers[1] = displayedChartPage.viewController
    }
}

extension ChartsViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedViewsControllers.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedChartPage = displayedViewsControllers[indexPath.row]
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "ChartsTableViewCell") as? ChartsTableViewCell else {
            return UITableViewCell()
        }

        cell.updateUI(displayedChartPage.name.uppercased())
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let displayedChartPage = displayedViewsControllers[indexPath.row]

        splitViewController?.showDetailViewController(displayedChartPage.viewController, sender: nil)
        
    }
}
