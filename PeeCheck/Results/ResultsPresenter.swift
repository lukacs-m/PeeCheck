//
//  ResultsPresenter.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 22/04/2019.
//  Copyright (c) 2019 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ResultsPresentationLogic {
    func presentFetchUserData(response: MainResults.FetchUserData.Response)
}

class ResultsPresenter: ResultsPresentationLogic {
    weak var viewController: ResultsDisplayLogic?
    
    // MARK: Do something
    
    func presentFetchUserData(response: MainResults.FetchUserData.Response) {
        var displayedResultElements: [MainResults.FetchUserData.ViewModel.DisplayedResultElements] = []
        let conclusion = createResultElement(type: .conclusion, conclusion: createDisplayConclusion(response.conclusion))
        displayedResultElements.append(conclusion)
        if let dayData = response.data["day"], let nightData = response.data["night"] {
            let dayResults = createResultElement(type: .day, result: createMicturitionResults(dayData))
            let nightResults = createResultElement(type: .night, result: createMicturitionResults(nightData))
            displayedResultElements.append(dayResults)
            displayedResultElements.append(nightResults)
        }
        
        let viewModel = MainResults.FetchUserData.ViewModel(user: response.user, enoughDaysRecording: response.enoughDaysRecording, resultElements: displayedResultElements)
        viewController?.displayUserData(viewModel: viewModel)
    }
}

extension ResultsPresenter {
    private func createDisplayConclusion(_ conclusion: [String: String]) -> MainResults.FetchUserData.ViewModel.DisplayedConclusion {
        let helper = conclusion["helper"] ?? ""
        let conclusion = conclusion["conclusion"] ?? ""
        return MainResults.FetchUserData.ViewModel.DisplayedConclusion(title: "Conclusion test", helper: helper, conclusion: conclusion)
    }
    
    private func createMicturitionResults(_ data: MainResults.MicturitionResults) -> MainResults.FetchUserData.ViewModel.DisplayedInformation {
        let displayedInformation = MainResults.FetchUserData.ViewModel.DisplayedInformation (
            title: data.isNight ? "Nighting micturions statistics" : "Daytime micturion statistics" ,
            shortestMicturition: "Shortest micturition is: \(data.shortestMicturition) seconds",
            longestMicturition: "Longtest micturition is: \(data.longestMicturition) seconds",
            averageMicturitionTime: "Average micturition time is \(data.averageMicturitionTime) seconds",
            averageNumberOfMicturition: "Average micturitions recorded per is \(data.averageNumberOfMicturition)",
            maxNumberOfMicturition: "Maximun number of micturition ever recorded in a day is \(data.maxNumberOfMicturition)",
            minNumberOfMicturition: "Minimun number of micturition ever recorded in a day is \(data.minNumberOfMicturition)")
        return displayedInformation
    }
    
    private func createResultElement(type: MainResults.TypeOfResults, result: MainResults.FetchUserData.ViewModel.DisplayedInformation? = nil, conclusion: MainResults.FetchUserData.ViewModel.DisplayedConclusion? = nil) -> MainResults.FetchUserData.ViewModel.DisplayedResultElements {
        return MainResults.FetchUserData.ViewModel.DisplayedResultElements(type: type, micturitionResults: result, conclusion: conclusion)
    }
}
