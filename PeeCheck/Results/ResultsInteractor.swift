//
//  ResultsInteractor.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 22/04/2019.
//  Copyright (c) 2019 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol ResultsBusinessLogic {
    func fetchUserData(request: MainResults.FetchUserData.Request)
}

protocol ResultsDataStore {
}

final class ResultsInteractor: ResultsBusinessLogic, ResultsDataStore {
    var presenter: ResultsPresentationLogic?
    var worker = ResultsWorker()
    
    // MARK: Get the user's data
    
    func fetchUserData(request: MainResults.FetchUserData.Request) {
        
        var response: MainResults.FetchUserData.Response!
        
        let user = worker.getUser().user
        let micturitions = worker.getMicturitions().micturitions
        let enoughDaysOfRecording = worker.getNumberOfDayRecording(micturitions) >= 1 ? true : false
        let mainResultsData = createMainResults(micturitions)
        let conclusion = createUserConclusion()
        
        response = MainResults.FetchUserData.Response(user: user, enoughDaysRecording: enoughDaysOfRecording, data: mainResultsData, conclusion: conclusion)
        presenter?.presentFetchUserData(response: response)
    }
    
}

private extension ResultsInteractor {
     func createUserDataResponse(_ micturitions: RealmSwift.Results<Micturition>?, duringNight: Bool = false) -> MainResults.MicturitionResults {
        let shortestMicturition = worker.getShortesttMicturition(micturitions, byNight: duringNight)
        let longestMicturition = worker.getLongestMicturition(micturitions, byNight: duringNight)
        let averageMicturitionTime = worker.getAverageMicturitionTime(micturitions, byNight: duringNight)
        let totalNumberOfMicturition = worker.getTotalNumberOfMicturition(micturitions, byNight: duringNight)
        let averageNumberOfMicturition = worker.getAverageNumberOfMicturition(micturitions, byNight: duringNight)
        let maxNumberOfMicturition = worker.getMaxNumberOfMicturitionForADay(micturitions, byNight: duringNight)
        let minNumberOfMicturition = worker.getMinNumberOfMicturitionForADay(micturitions, byNight: duringNight)
        
        let result = MainResults.MicturitionResults(isNight: duringNight,
                                                    shortestMicturition: shortestMicturition,
                                                    longestMicturition: longestMicturition,
                                                    averageMicturitionTime: averageMicturitionTime,
                                                    totalNumberOfMicturition: totalNumberOfMicturition,
                                                    averageNumberOfMicturition: averageNumberOfMicturition,
                                                    maxNumberOfMicturition: maxNumberOfMicturition,
                                                    minNumberOfMicturition: minNumberOfMicturition)
        return result
    }
    
    private func createMainResults(_ micturitions: RealmSwift.Results<Micturition>?) -> [String: MainResults.MicturitionResults] {
        var data = [String: MainResults.MicturitionResults]()
        let nightData = createUserDataResponse(micturitions, duringNight: true)
        let dayData = createUserDataResponse(micturitions)
        data.updateValue(dayData, forKey: "day")
        data.updateValue(nightData, forKey: "night")
        return data
    }
    
    private func createUserConclusion() -> [String: String] {
        var conclusion: [String: String] = [:]
        conclusion.updateValue("you have very few recording please record more mucturitions", forKey: "helper")
        conclusion.updateValue("you are in good health", forKey: "conclusion")
        return conclusion
    }
}
