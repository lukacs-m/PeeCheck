//
//  ResultsWorker.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 22/04/2019.
//  Copyright (c) 2019 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift
import SwiftDate

class ResultsWorker: UserPersistenceInjected, MicturitionPersistenceInjected {
    
    func getUser() -> (user: User?, error: PersistenceErrors?) {
        return userDataManager.getUser()
    }
    
    func getMicturitions() -> (micturitions: RealmSwift.Results<Micturition>?, error: PersistenceErrors?) {
        return micturitionDataManager.getMicturitions()
    }
    
    func getNumberOfDayRecording(_ micturitions: RealmSwift.Results<Micturition>?) -> Int {
        guard let micturitions = micturitions else {
            return 0
        }
        let groupByDayMicturitions = Dictionary(grouping: micturitions, by: { $0.timestamp })
        
        return groupByDayMicturitions.count
    }
    
    func getLongestMicturition(_ micturitions: RealmSwift.Results<Micturition>?, byNight: Bool = false) -> Int {
        guard let micturitions = micturitions else { return 0 }
        
        let micturitionToStudy = byNight ? micturitions.filter { $0.isNight } : micturitions.filter { !$0.isNight }
        
        return micturitionToStudy.map { $0.duration }.max() ?? 0
    }
    
    func getShortesttMicturition(_ micturitions: RealmSwift.Results<Micturition>?, byNight: Bool = false) -> Int {
        guard let micturitions = micturitions else { return 0 }
        
        let micturitionToStudy = byNight ? micturitions.filter { $0.isNight } : micturitions.filter { !$0.isNight }
        
        return micturitionToStudy.map { $0.duration }.min() ?? 0
    }
    
    func getAverageMicturitionTime(_ micturitions: RealmSwift.Results<Micturition>?, byNight: Bool = false) -> Double {
        guard let micturitions = micturitions else { return 0 }
        
        let micturitionToStudy = byNight ? micturitions.filter { $0.isNight } : micturitions.filter { !$0.isNight }
        
        let average = micturitionToStudy.reduce(0.0) {
            return $0 + Double($1.duration/micturitionToStudy.count)
        }
        return average
    }
    
    func getTotalNumberOfMicturition(_ micturitions: RealmSwift.Results<Micturition>?, byNight: Bool = false) -> Int {
        guard let micturitions = micturitions else { return 0 }
        
        let micturitionToStudy = byNight ? micturitions.filter { $0.isNight } : micturitions.filter { !$0.isNight }
        
        return micturitionToStudy.count
    }
    
    func getAverageNumberOfMicturition(_ micturitions: RealmSwift.Results<Micturition>?, byNight: Bool = false) -> Double {
        guard let micturitions = micturitions else { return 0 }
        var averageMicturition = 0.0
        
        let groupByDayMicturitions = Dictionary(grouping: micturitions, by: { $0.timestamp })
        
        for (_, daysMicturitions) in groupByDayMicturitions {
            let micturitions = byNight ? daysMicturitions.filter { $0.isNight } : daysMicturitions.filter { !$0.isNight }
            
            let average = Double(micturitions.count / groupByDayMicturitions.count)
            averageMicturition += average
        }
        
        return averageMicturition
    }
    
    func getMaxNumberOfMicturitionForADay(_ micturitions: RealmSwift.Results<Micturition>?, byNight: Bool = false) -> Int {
        guard let micturitions = micturitions else { return 0 }
        var maxMicForADay = 0
        
        let groupByDayMicturitions = Dictionary(grouping: micturitions, by: { $0.timestamp })
        
        for (_, daysMicturitions) in groupByDayMicturitions {
            let micturitions = byNight ? daysMicturitions.filter { $0.isNight } : daysMicturitions.filter { !$0.isNight }
            
            maxMicForADay = maxMicForADay > micturitions.count ? maxMicForADay : micturitions.count
        }
        
        return maxMicForADay
    }
    
    func getMinNumberOfMicturitionForADay(_ micturitions: RealmSwift.Results<Micturition>?, byNight: Bool = false) -> Int {
        guard let micturitions = micturitions else { return 0 }
        var minMicForADay = 0
        
        let groupByDayMicturitions = Dictionary(grouping: micturitions, by: { $0.timestamp })
        
        for (_, daysMicturitions) in groupByDayMicturitions {
            let micturitions = byNight ? daysMicturitions.filter { $0.isNight } : daysMicturitions.filter { !$0.isNight }
            
            minMicForADay = minMicForADay < micturitions.count ? minMicForADay : micturitions.count
        }
        
        return minMicForADay
    }
}

