//
//  CreateUserViewController.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 01/05/2018.
//  Copyright (c) 2018 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateUserDisplayLogic: class {
    func displaySomething(viewModel: CreateUser.Something.ViewModel)
}

class CreateUserViewController: UIViewController, CreateUserDisplayLogic {
    var interactor: CreateUserBusinessLogic?
    var router: (NSObjectProtocol & CreateUserRoutingLogic & CreateUserDataPassing)?
    
    // MARK: - Outlet
    
    @IBOutlet weak var lblTitle: UILabel!
    @IBOutlet weak var lblAgeTitle: UILabel!
    @IBOutlet weak var txtAge: UITextField!
    @IBOutlet weak var lblGenderTitle: UILabel!
    @IBOutlet weak var txtGender: UITextField!
    @IBOutlet weak var btnCreateUser: RoundedCornerButton!
    private var genderMethodPicker = UIPickerView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CreateUserInteractor()
        let presenter = CreateUserPresenter()
        let router = CreateUserRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setUpUI() {
        genderMethodPicker.dataSource = self
        genderMethodPicker.delegate = self
        btnCreateUser.setTitle("account_btn_delete".localized(), for: .normal)
        btnCreateUser.backgroundColor = Style.Color.MainBlue
        btnCreateUser.contentEdgeInsets = Style.Size.ButtonInsets
        btnCreateUser.setTitleColor(.white, for: .normal)
        txtGender.delegate = self
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configurePicker()
        doSomething()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setUpUI()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        let request = CreateUser.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CreateUser.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}

extension CreateUserViewController: UITextFieldDelegate, UIPickerViewDataSource, UIPickerViewDelegate {
    // MARK: - Gender types
    
    func configurePicker() {
        txtGender.inputView = genderMethodPicker
    }
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return interactor?.genderTypes.count ?? 0
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return interactor?.genderTypes[row]
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        txtGender.text = interactor?.genderTypes[row]
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == txtGender, textField.text == "" {
            textField.text = interactor?.genderTypes[0]
        }
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
}
