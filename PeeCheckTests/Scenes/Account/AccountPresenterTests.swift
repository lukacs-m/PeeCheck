//
//  AccountPresenterTests.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 01/05/2018.
//  Copyright (c) 2018 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Quick
import Nimble
@testable import PeeCheck

class AccountPresenterTests: QuickSpec {
    
    override func spec() {
        describe("AccountPresenter tests") {
            
            // MARK: Subject under test
            
            var sut: AccountPresenter!
            
            beforeSuite {
                setupAccountPresenter()
            }
            
            // MARK: Test setup
            
            func setupAccountPresenter()
            {
                sut = AccountPresenter()
            }
            
            // MARK: Test doubles
            
            class AccountDisplayLogicSpy: AccountDisplayLogic {
                var displayUserInformationCalled = false
                var displayDeletedUserInformationCalled = false
                
                func displayUserInformation(viewModel: Account.FetchUser.ViewModel) {
                    displayUserInformationCalled = true
                }
                
                func displayDeletedUserInformation(viewModel: Account.DeleteUser.ViewModel) {
                    displayDeletedUserInformationCalled = true
                }
            }
            
            // MARK: Tests
            
            context("Fetch User") {
                it("Should display user information") {
                    let spy = AccountDisplayLogicSpy()
                    sut.viewController = spy
                    let response = Account.FetchUser.Response(user: nil, error: nil)
                    
                    sut.presentUser(response: response)
                    expect(spy.displayUserInformationCalled).to(beTrue())
                }
            }
            
            context("Delete User information") {
                it("Should call isplay deleted user information") {
                    let spy = AccountDisplayLogicSpy()
                    sut.viewController = spy
                    let response = Account.DeleteUser.Response(error: nil)
                    
                    sut.presentDeletedUser(response: response)
                    expect(spy.displayDeletedUserInformationCalled).to(beTrue())
                }
            }
        }
    }
}
