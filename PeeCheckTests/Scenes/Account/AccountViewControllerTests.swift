//
//  AccountViewControllerTests.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 01/05/2018.
//  Copyright (c) 2018 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//


import Quick
import Nimble
import ChameleonFramework
@testable import PeeCheck

class AccountViewControllerTests: QuickSpec {
    
    override func spec() {
        
        describe("AccountViewController tests") {
            
            // MARK: Subject under test
            
            var sut: AccountViewController!
            var window: UIWindow!
            
            // MARK: Test setup
            
            func setupAccountViewController() {
                sut = AccountViewController()
            }
            
            beforeEach {
                super.setUp()
                window = UIWindow(frame: UIScreen.main.bounds)
                setupAccountViewController()
            }
            
            func loadview() {
                window.addSubview(sut.view)
            }
            
            afterEach {
                window = nil
            }
            
            // MARK: Test doubles
            
            class AccountBusinessLogicSpy: AccountBusinessLogic {
                var fetchUserCalled = false
                var deleteUserCalled = false
                
                func fetchUser(request: Account.FetchUser.Request) {
                    fetchUserCalled = true
                }
                
                func deleteUser(request: Account.DeleteUser.Request) {
                    deleteUserCalled = true
                }
            }
            
            class AccountRouterSpy: AccountRouter {
                // MARK: Method call expectations
                
                var routeToCreateUserCalled = false
                
                // MARK: Spied methods
                override func routeToCreateUser() {
                    routeToCreateUserCalled = true
                }
            }
            
            //MARK: - Test
            
            context("When view if loaded") {
                it("Should be a AccountViewController") {
                    expect(sut).to(beAKindOf(AccountViewController.self))
                }
                
                it("Should fetch user information on start") {
                    let accountBusinessLogicSpy = AccountBusinessLogicSpy()
                    sut.interactor = accountBusinessLogicSpy
                    
                    loadview()
                    
                    expect(accountBusinessLogicSpy.fetchUserCalled).to(beTrue())
                }
            }
            
            context("When delete user data is called") {
                it("Should delete the user information") {
                    let accountBusinessLogicSpy = AccountBusinessLogicSpy()
                    sut.interactor = accountBusinessLogicSpy
                    
                    sut.deleteUserInformationAction(UIButton())
                    
                    expect(accountBusinessLogicSpy.deleteUserCalled).to(beTrue())
                }
                
                it("Should erase user information being displayed") {
                    loadview()
                    let viewModel = Account.FetchUser.ViewModel(user: User(24, .men))
                    sut.displayUserInformation(viewModel: viewModel)
                    
                    sut.deleteUserInformationAction(UIButton())
                    
                    expect(sut.lblAgeData.text) == "account_lbl_user_data_missing".localized()
                    expect(sut.lblGenderData.text) == "account_lbl_user_data_missing".localized()
                }
            }
            
            context("When user information are displayed") {
                it("Shoul not have any user information displayed") {
                    loadview()
                    let viewModel = Account.FetchUser.ViewModel(user: nil)
                    sut.displayUserInformation(viewModel: viewModel)
                    
                    expect(sut.lblAgeData.text) == "account_lbl_user_data_missing".localized()
                    expect(sut.lblGenderData.text) == "account_lbl_user_data_missing".localized()
                }
                
                it("Should have user information displayed") {
                    loadview()
                    let user = User(24, .men)
                    let viewModel = Account.FetchUser.ViewModel(user: user)
                    sut.displayUserInformation(viewModel: viewModel)
                    
                    expect(sut.lblAgeData.text) == "\(user.age ?? 24)"
                    expect(sut.lblGenderData.text) == user.gender?.localized()
                }
            }
            
            context("When need to be edited") {
                it("Should call create user router function") {
                    let spy = AccountRouterSpy()
                    sut.router = spy
                    
                    loadview()
                    
                    sut.goToEditAction(UIButton())
                    
                    expect(spy.routeToCreateUserCalled).to(beTrue())
                }
            }
        }
    }
}
