//
//  RecordingPresenterTests.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 17/04/2018.
//  Copyright (c) 2018 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Quick
import Nimble
@testable import PeeCheck

class RecordingPresenterTests: QuickSpec {
    
    override func spec() {
        describe("RecordingPresenter tests") {
            
            // MARK: Subject under test
            
            var sut: RecordingPresenter!
            
            beforeSuite {
                setupRecordingPresenter()
            }
            
            // MARK: Test setup
            
            func setupRecordingPresenter()
            {
                sut = RecordingPresenter()
            }
            
            // MARK: Test doubles
            
            class RecordingDisplayLogicSpy: RecordingDisplayLogic
            {
                var displaySetSwitchCalled = false
                var updateRecordBtnDisplayCalled = false
                
                func displaySetSwitch(viewModel: Recording.SetSwitch.ViewModel) {
                    displaySetSwitchCalled = true
                }
                
                func updateRecordBtnDisplay(viewModel: Recording.RecordMicturition.ViewModel) {
                     updateRecordBtnDisplayCalled = true
                }
            }
            
            // MARK: Tests
            
            context("Check time") {
                it("Sould return bool depending on time of day") {
                        let spy = RecordingDisplayLogicSpy()
                        sut.viewController = spy
                        let response = Recording.SetSwitch.Response(isNight: true)
                    
                    sut.presentSetSwitch(response: response)
                    expect(spy.displaySetSwitchCalled).to(beTrue())
                }
            }
            
            context("Record micturition") {
                it("Sould return bool after saving micturition") {
                    let spy = RecordingDisplayLogicSpy()
                    sut.viewController = spy
                    let response = Recording.RecordMicturition.Response(isRecording: true, savedMicturition: nil)
                    
                    sut.presentRecordMicturition(response: response)
                    expect(spy.updateRecordBtnDisplayCalled).to(beTrue())
                }
            }
        }
    }
}
