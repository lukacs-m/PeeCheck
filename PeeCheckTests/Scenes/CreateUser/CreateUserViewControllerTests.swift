//
//  CreateUserViewControllerTests.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 08/05/2018.
//  Copyright (c) 2018 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Quick
import Nimble
import ChameleonFramework
@testable import PeeCheck

class CreateUserControllerTests: QuickSpec {
    
    override func spec() {
        
        describe("CreateUserViewController tests") {
            
            // MARK: Subject under test
            
            var sut: CreateUserViewController!
            var window: UIWindow!
            
            // MARK: Test setup
            
            func setupCreateUserViewController() {
                sut = CreateUserViewController()
            }
            
            beforeEach {
                super.setUp()
                window = UIWindow(frame: UIScreen.main.bounds)
                setupCreateUserViewController()
            }
            
            func loadview() {
                window.addSubview(sut.view)
            }
            
            afterEach {
                window = nil
            }
            
            // MARK: Test doubles
            
            class CreateUserBusinessLogicSpy: CreateUserBusinessLogic {
                
                var genderTypes = [String]()
                var userToEdit: User?
                var showUserToEditCalled = false
                var checkUserAgeCalled = false
                var createUserCalled = false
                var updateUserCalled = false
                var checkFormFieldsCalled = false
                
                func showUserToEdit(request: CreateUser.EditUser.Request) {
                    showUserToEditCalled = true
                }
                
                func checkUserAge(request: CreateUser.UserAge.Request) {
                    checkUserAgeCalled = true
                }
                
                func createUser(request: CreateUser.CreateUser.Request) {
                    createUserCalled = true
                }
                
                func updateUser(request: CreateUser.UpdateUser.Request) {
                    updateUserCalled = true
                }
                
                func checkFormFields(request: CreateUser.ActivateSaveButton.Request) {
                    checkFormFieldsCalled = true
                }
            }
            
            class CreateUserRouterSpy: CreateUserRouter {
                // MARK: Method call expectations
                
                var routeToAccountCalled = false
                
                // MARK: Spied methods
                override func routeToAccount() {
                    routeToAccountCalled = true
                }
            }
            
            //MARK: - Test
            
            context("When view if loaded") {
                it("Should be a CreateUserViewController") {
                    expect(sut).to(beAKindOf(CreateUserViewController.self))
                }
                
                it("Should fetch user information on start") {
                    let createUserBusinessLogicSpy = CreateUserBusinessLogicSpy()
                    sut.interactor = createUserBusinessLogicSpy
                    
                    loadview()
                    
                    expect(createUserBusinessLogicSpy.showUserToEditCalled ).to(beTrue())
                }
            }
            
            context("When user form is changed") {
                it("Should call check age function") {
                    let createUserBusinessLogicSpy = CreateUserBusinessLogicSpy()
                    sut.interactor = createUserBusinessLogicSpy
                    
                    loadview()
                    sut.checkAgeAction(UIButton())
                    
                    expect(createUserBusinessLogicSpy.checkUserAgeCalled).to(beTrue())
                }
                
                it("Should should display error on age txt field because of young age") {
                    loadview()
                    sut.txtAge.text = "\(3)"
                    sut.checkAgeAction(UIButton())
                    
                    expect(sut.txtAge.layer.borderColor).to(be(UIColor.red.cgColor))
                }
                
                it("Should should display error on age txt field because of old age") {
                    loadview()
                    sut.txtAge.text = "\(150)"
                    sut.checkAgeAction(UIButton())
                    
                    expect(sut.txtAge.layer.borderColor).to(be(UIColor.red.cgColor))
                }
                
                it("Should call check age function") {
                    loadview()
                    sut.txtAge.text = "zdalj"
                    sut.checkAgeAction(UIButton())
                    
                    expect(sut.txtAge.layer.borderColor).to(be(UIColor.red.cgColor))
                }
                
                it("Should check information passed before asving user") {
                    let createUserBusinessLogicSpy = CreateUserBusinessLogicSpy()
                    sut.interactor = createUserBusinessLogicSpy
                    loadview()
                    let viewModel = CreateUser.UserAge.ViewModel(age: 25, valide: true)
                    sut.displayUserAge(viewModel: viewModel)

                    expect(createUserBusinessLogicSpy.checkFormFieldsCalled).to(beTrue())
                }
            }
            
            context("When user information are displayed") {
                it("Shoul not have any user information displayed") {
                    sut.interactor?.userToEdit = nil
                    loadview()
                    
                    expect(sut.txtAge.text) == ""
                    expect(sut.txtGender.text) == ""
                }
                
                it("Should have user information displayed") {
                    let user = User(24, .woman)
                    sut.interactor?.userToEdit = user
                    loadview()
                    
                    expect(sut.txtAge.text) == "\(user.age)"
                    expect(sut.txtGender.text) == user.gender.localized()
                }
            }
            
            context("When user is being updated or create") {
                it("Should call save user function") {
                    let createUserBusinessLogicSpy = CreateUserBusinessLogicSpy()
                    sut.interactor = createUserBusinessLogicSpy
                    
                    loadview()
                    sut.txtAge.text = "\(50)"
                    sut.txtGender.text = "woman"
                    
                    sut.saveUser(UIButton())
                    
                    expect(createUserBusinessLogicSpy.createUserCalled).to(beTrue())
                }
                
                it("Should call update user function") {
                    let createUserBusinessLogicSpy = CreateUserBusinessLogicSpy()
                    sut.interactor = createUserBusinessLogicSpy
                    sut.interactor?.userToEdit = User(24, .woman)

                    loadview()
                    
                    sut.saveUser(UIButton())
                    
                    expect(createUserBusinessLogicSpy.updateUserCalled).to(beTrue())
                }
                
                it("Should create a user") {
                    loadview()
                    sut.txtAge.text = "\(50)"
                    sut.txtGender.text = "woman"
                    
                    sut.saveUser(UIButton())
                    
                    expect(sut.interactor?.userToEdit).toNot(beNil())
                    expect(sut.interactor?.userToEdit?.age) == 50
                    expect(sut.interactor?.userToEdit?.gender) == .woman
                }
                
                it("Should call account router function") {
                    let createUserRouterSpy = CreateUserRouterSpy()
                    sut.router = createUserRouterSpy
                    
                    loadview()
                    
                    sut.txtAge.text = "\(50)"
                    sut.txtGender.text = "woman"
                    sut.saveUser(UIButton())
                    
                    expect(createUserRouterSpy.routeToAccountCalled).to(beTrue())
                }
            }
        }
    }
}

