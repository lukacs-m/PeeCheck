//
//  CreateUserWorkerTests.swift
//  PeeCheck
//
//  Created by Martin Lukacs on 08/05/2018.
//  Copyright (c) 2018 Martin Lukacs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Quick
import Nimble
@testable import PeeCheck

class CreateUserWorkerTests: QuickSpec {
    
    override func spec() {
        describe("CreateUserWorker tests") {
            
            // MARK: Subject under test
            
            var sut: CreateUserWorker!
            
            beforeSuite {
                setupCreateUserWorker()
            }
            
            // MARK: Test setup
            
            beforeEach {
                sut.userDataManager = UserRealmManager()
            }
            
            func setupCreateUserWorker() {
                sut = CreateUserWorker()
            }
            
            // MARK: Tests
            
            context("User creation") {
                it("Should return a user if no error occured") {
                    let userFields = CreateUser.UserFields(age: 24, gender: .woman)
                    let results = sut.createUser(userFields.age, userFields.gender)
                    expect(results.user).to(beAKindOf(User.self))
                    expect(results.user?.age) == 24
                    expect(results.user?.gender) == .woman
                }
                
                it("Should return a error ") {
                    sut.userDataManager = UserRealmManagerMockError()
                    let userFields = CreateUser.UserFields(age: 24, gender: .woman)
                    let results = sut.createUser(userFields.age, userFields.gender)
                    expect(results.error).toNot(beNil())
                    expect(results.error) == PersistenceErrors.couldNotSaveUser
                }
            }
            
            context("User update") {
                it("Should return a user if no error occured") {
                    let userFields = CreateUser.UserFields(age: 46, gender: .men)
                    _ = sut.createUser(24, .woman)
                    let results = sut.updateUser(userFields.age, userFields.gender)
                    expect(results.user).to(beAKindOf(User.self))
                    expect(results.user?.age) == 46
                    expect(results.user?.gender) == .men
                }
                
                it("Should return a error ") {
                    sut.userDataManager = UserRealmManagerMockError()
                    let results = sut.updateUser(45, .woman)
                    expect(results.error).toNot(beNil())
                    expect(results.error) == PersistenceErrors.couldNotSaveUser
                }
            }
        }
    }
}

